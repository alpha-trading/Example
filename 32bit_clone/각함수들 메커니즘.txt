● 데이터 가져오는 과정
○ 기본 루트
dynamicCall 함수를 사용해서 원하는 함수를 스크린 번호와함께 시그널보내면
이벤트루프 열고 OnRecieveTrData 이벤트 연결됌(선처리로 이벤트(연결)했기때문)
슬롯에서 받고 이벤트루프와 스크린 끊어야됌

○ 함수설명
CommRqData : 서버로 전송하는 함수
setINputValue : 매개변수 등록하는 함수
GetCommData : 받은데이터에서 원하는 부분만 가져오는 함수
GetRepeatCnt : 종목 or 분봉 개수가져오는함수

● 단일 데이터 vs 다중 데이터
1. 단일데이터를 가져올때는 
보내는 함수 int =0 으로하고 정보를 받고 원하는부분만 적절히가져오기

2. 다중데이터 가져올때는
배열로 받아야하기 때문에 변수로받은다음 그 변수를 반복문통해서 2차원배열 분해

● 스크린 (1개당 100종목 까지들어감)
스크린은 한개에 100개, 최대 200개까지 생성가능하다.
일종의 박스라고 생각해서 특정용도로만 사용한다. ex) 잔고조회용, 주문 요청용
DisconnectRealData(스크린번호) : 해당스크린 다 날리기
SetRealRemove(스크린번호, 종목코드) : 해당스크린의 특정종목코드만 날리기


● 실시간 요청(SetRealReg)
SetRealReg(스크린번호, 종목번호, FID, 추가여부)로 보내서 슬롯에 받는다
realdata_slot은 (종목코드, 데이터이름, 데이터리스트)를 인자로받는다.
GetCommData로 데이터를 쪼개서 받는걸 GetCommRealData로 한다.
여러개를 보낼때는 12;6;64 이렇게 FID번호를 보내면됌

● 거래과정 함수
SendOrder(요청이름, 스크린번호, 계좌번호, 주문유형, 종목코드, 매매수량, 주문가격, 주문방법, 고유번호):
요청이름 : 주문할때 유형을 한글로보냄 ex) 신규주문
주문유형 : 1.신규매수, 2.신규매도, 이런식으로 번호로 되어있음
주문방법 : 시장가, 지정가 뜻함
고유번호 : 맨처음에는 없지만 정정, 취소할때 사용하는 주문에해당하는 번호

SendOrder(요청이름, 스크린번호, 계좌번호, 주문유형, 종목코드, 주문수량, 주문가격, 거래구분, 주문번호)
주문유형 : 3 매수취소
주문수량 : 0(전체)
주문가격 : 매도취소일때는 0보내면됌
거래구분 : FID값 (보통 지정가)

● 체결장고 함수
ReceiveChejanData 로 이벤트 연결하면 슬롯으로 받아서 사용할때, 그전에는 GetCommData로 쪼개서사용하던걸
GetChejanData 함수를 이용해서 쪼개서 받는다.

체결 주문번호를 받아올때, 주문번호 : 신규주문번호, 원주문번호 : 바로직전 주문번호로생각
주문 취소 정정할때, 정정주문으로 받은 신규주문번호가 - 주문번호, 처음주문넣을때 주문번호 - 원주문번호

● 여기서 만든 계좌가 구분이안감, 체결전 - 체결후 - 잔고 - 포트폴리오 구분
self.portfolio_stock_dict = 종목 분석해놓은거 저장해두기
self.jango_dict = 매수체결한 종목들 업데이트
self.calcul_data = 분석에 쓰일 데이터 저장(일봉)
self.account_stock_dict = 보유종목담은 것
self.not_account_stock_dict = 미체결종목(맨처음매수하면 다여기들어감) 

jango랑 account_stock_dict 차이는 잔고는 실시간에서 사용, 프로그램 꺼진뒤 불러올때 사용
잔고는 동적, account는 정적으로 생각해도 가능

● 데이터 로깅
.conf = 데이터를 어떻게 보여줄지 설정하는 파일, .py = 로그에 관련된 파이썬 코드를 작성할 파일 

● 데이터 메세지
slack 이용하여 메세지로 받아서 사용

● 프로그램 실행 파일만들기
compile : 팀 협업에서 사용하는것, 공유에 용이하지만 코드를 수정할때마다 다시 컴파일 해야함
배치파일 : 수정한 파이썬 파일 바로실행가능함



